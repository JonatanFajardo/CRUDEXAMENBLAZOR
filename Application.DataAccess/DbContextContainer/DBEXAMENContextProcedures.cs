// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Application.Entities.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Application.DataAccess.DbContextContainer;

namespace Application.DataAccess.DbContextContainer
{
    public partial class DBEXAMENContext
    {
        private DBEXAMENContextProcedures _procedures;

        public virtual DBEXAMENContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DBEXAMENContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public DBEXAMENContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PR_tbProductos_InsertResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_tbProductos_ListResult>().HasNoKey().ToView(null);
        }
    }

    public interface IDBEXAMENContextProceduresContract
    {
        Task<int> PR_tbProductos_InsertAsync(string prod_Codigo, string prod_Nombre, decimal? prod_Precio, int? tipro_Id, int? unime_Id, int? prod_UsuarioCrea, CancellationToken cancellationToken = default);
        Task<List<PR_tbProductos_ListResult>> PR_tbProductos_ListAsync(CancellationToken cancellationToken = default);
    }

    public partial class DBEXAMENContextProcedures
    {
        private readonly DBEXAMENContext _context;

        public DBEXAMENContextProcedures(DBEXAMENContext context)
        {
            _context = context;
        }

        public virtual async Task<int> PR_tbProductos_InsertAsync(string prod_Codigo, string prod_Nombre, decimal? prod_Precio, int? tipro_Id, int? unime_Id, int? prod_UsuarioCrea, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "prod_Codigo",
                    Size = 14,
                    Value = prod_Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prod_Nombre",
                    Size = 300,
                    Value = prod_Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prod_Precio",
                    Precision = 10,
                    Scale = 2,
                    Value = prod_Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "tipro_Id",
                    Value = tipro_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unime_Id",
                    Value = unime_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "prod_UsuarioCrea",
                    Value = prod_UsuarioCrea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PR_tbProductos_Insert] @prod_Codigo, @prod_Nombre, @prod_Precio, @tipro_Id, @unime_Id, @prod_UsuarioCrea", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_tbProductos_ListResult>> PR_tbProductos_ListAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_tbProductos_ListResult>("EXEC @returnValue = [dbo].[PR_tbProductos_List]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
